package cn.fakejson.fakejson;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.Random;

import org.joda.time.DateTime;

public class FakeClass<E> {

	private E entity;

	private int size;

	public E getEntity() throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		// System.out.println(JsonUtil.toString(entity.getClass().getDeclaredFields()));
		Field[] fields = entity.getClass().getDeclaredFields();
		for (Field field : fields) {
			field.setAccessible(true);

			switch (field.getGenericType().getTypeName()) {
			case "java.util.Date":
				Method method1 = null;

				// 需要看一下这个获取到的方法对不对
				method1 = entity.getClass().getMethod("set" + upperCase(field.getName()));
				// 怎么用这个获取到的方法?
				// 用这个方法set一个值

				Random random = new Random();
				Date time = new DateTime(random.nextLong()).withMillisOfSecond(0).toDate();
//				field.set.set(entity, time);
				method1.invoke(entity, time);


				break;
			default:
				break;
			}

			// // 获取字段的名字
			// System.out.printf("字段：%-4s|", field.getName());
			// // 获取字段的类型的Class类，然后获取规范化的名字
			// System.out.printf("类型：%-18s|", field.getGenericType().getTypeName());
			// // 使用Field.getModifiers()，可获取字段的修饰符编码，
			// // 然后再使用Modifier.toString(int code)，来解码成字字符串
			// System.out.printf("修饰符：%s", Modifier.toString(field.getModifiers()));
			// System.out.println();
		}

		return entity;
	}

	public void setEntity(E entity) {
		this.entity = entity;
	}

	public int getSize() {
		return size;
	}

	public void setSize(int size) {
		this.size = size;
	}

	public String upperCase(String str) {
		char[] ch = str.toCharArray();
		if (ch[0] >= 'a' && ch[0] <= 'z') {
			ch[0] = (char) (ch[0] - 32);
		}
		return new String(ch);
	}
}
